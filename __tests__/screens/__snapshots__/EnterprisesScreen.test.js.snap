// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EnterprisesScreen should render correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaView
    edges={
      Array [
        "top",
      ]
    }
    style={
      Object {
        "backgroundColor": "#5F49AB",
        "zIndex": 100,
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "#eee",
          "borderBottomLeftRadius": 5,
          "borderBottomRightRadius": 5,
          "flexDirection": "column",
          "height": 200,
          "width": "100%",
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#5F49AB",
            "flexBasis": 0,
            "flexDirection": "row",
            "flexGrow": 1,
            "flexShrink": 1,
            "justifyContent": "space-between",
            "paddingBottom": 20,
            "paddingLeft": 20,
            "paddingRight": 20,
            "paddingTop": 20,
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flexBasis": 0,
              "flexDirection": "row",
              "flexGrow": 1,
              "flexShrink": 1,
              "justifyContent": "flex-start",
            }
          }
        >
          <Image
            resizeMode="cover"
            source={
              Object {
                "testUri": "../../../src/assets/no-photo.png",
              }
            }
            style={
              Array [
                Object {
                  "backgroundColor": "#dde2e3",
                  "borderColor": "#ffffff",
                  "borderRadius": 56,
                  "borderWidth": 4,
                  "height": 56,
                  "width": 56,
                },
              ]
            }
          />
          <View
            style={
              Object {
                "flexBasis": 0,
                "flexGrow": 1,
                "flexShrink": 1,
                "paddingLeft": 10,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#ffffff",
                    "flexWrap": "wrap",
                    "fontSize": 20,
                    "paddingLeft": 5,
                  },
                ]
              }
            />
          </View>
        </View>
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#5F49AB",
                "flexDirection": "row-reverse",
                "height": 48,
                "justifyContent": "flex-start",
                "width": 48,
              },
            ]
          }
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <Text
              allowFontScaling={false}
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 12,
                  },
                  Array [
                    Object {
                      "color": "#ffffff",
                      "fontSize": 28,
                    },
                  ],
                  Object {
                    "fontFamily": "Material Icons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  Object {},
                ]
              }
            >
              
            </Text>
          </View>
        </View>
      </View>
      <View
        style={
          Array [
            Object {
              "backgroundColor": "#f1f2f3",
              "elevation": 5,
              "flexDirection": "row",
              "height": 60,
              "paddingBottom": 0,
              "paddingLeft": 20,
              "paddingRight": 20,
              "paddingTop": 0,
              "shadowColor": "rgba(0, 0, 0, 0.25)",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 1,
              "shadowRadius": 3.24,
            },
          ]
        }
      >
        <TextInput
          allowFontScaling={true}
          onChangeText={[Function]}
          onSubmitEditing={[Function]}
          placeholder="Search..."
          rejectResponderTermination={true}
          style={
            Array [
              Object {
                "flexBasis": 0,
                "flexGrow": 1,
                "flexShrink": 1,
              },
            ]
          }
          underlineColorAndroid="transparent"
          value=""
        />
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignSelf": "center",
              "marginRight": -20,
              "opacity": 1,
              "paddingBottom": 0,
              "paddingLeft": 20,
              "paddingRight": 20,
              "paddingTop": 0,
            }
          }
        >
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "color": undefined,
                  "fontSize": 12,
                },
                Array [
                  Object {
                    "color": "#bbb",
                    "fontSize": 24,
                  },
                ],
                Object {
                  "fontFamily": "Material Icons",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                Object {},
              ]
            }
          >
            
          </Text>
        </View>
      </View>
    </View>
  </RNCSafeAreaView>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "padding": 20,
      }
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        colors={
          Array [
            "#5F49AB",
          ]
        }
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={1}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "flex": 1,
      }
    }
    testID="content-list"
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#5F49AB",
        "borderRadius": 30,
        "bottom": 20,
        "elevation": 6,
        "flexDirection": "column",
        "height": 60,
        "justifyContent": "center",
        "opacity": 1,
        "position": "absolute",
        "right": 20,
        "shadowColor": "rgba(0, 0, 0, 0.27)",
        "shadowOffset": Object {
          "height": 3,
          "width": 0,
        },
        "shadowOpacity": 1,
        "shadowRadius": 4.65,
        "width": 60,
        "zIndex": 50,
      }
    }
  >
    <Text
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": undefined,
            "fontSize": 12,
          },
          Array [
            Object {
              "color": "white",
              "fontSize": 28,
            },
          ],
          Object {
            "fontFamily": "Material Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      
    </Text>
  </View>
  <Modal
    animationType="fade"
    hardwareAccelerated={true}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "rgba(0, 0, 0, 0.4)",
            "flexBasis": 0,
            "flexGrow": 1,
            "flexShrink": 1,
            "justifyContent": "center",
          },
        ]
      }
    >
      <View
        accessible={true}
        focusable={false}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "alignItems": "stretch",
              "backgroundColor": "white",
              "borderRadius": 20,
              "elevation": 5,
              "height": 430,
              "marginBottom": 20,
              "marginLeft": 20,
              "marginRight": 20,
              "marginTop": 20,
              "paddingBottom": 25,
              "paddingLeft": 25,
              "paddingRight": 25,
              "paddingTop": 25,
              "shadowColor": "rgba(0, 0, 0, 0.25)",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 1,
              "shadowRadius": 3.24,
              "width": 350,
            },
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "fontSize": 18,
                "fontWeight": "bold",
                "paddingBottom": 15,
              },
            ]
          }
        >
          Filter by type
        </Text>
        <RCTScrollView
          data={Array []}
          disableVirtualization={false}
          getItem={[Function]}
          getItemCount={[Function]}
          horizontal={false}
          initialNumToRender={10}
          keyExtractor={[Function]}
          maxToRenderPerBatch={10}
          onContentSizeChange={[Function]}
          onEndReachedThreshold={2}
          onLayout={[Function]}
          onMomentumScrollEnd={[Function]}
          onScroll={[Function]}
          onScrollBeginDrag={[Function]}
          onScrollEndDrag={[Function]}
          removeClippedSubviews={false}
          renderItem={[Function]}
          scrollEventThrottle={50}
          stickyHeaderIndices={Array []}
          updateCellsBatchingPeriod={50}
          viewabilityConfigCallbackPairs={Array []}
          windowSize={21}
        >
          <View />
        </RCTScrollView>
        <View
          style={
            Array [
              Object {
                "flexDirection": "row",
                "justifyContent": "flex-end",
                "paddingTop": 5,
              },
            ]
          }
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
                "paddingBottom": 5,
                "paddingLeft": 10,
                "paddingRight": 10,
                "paddingTop": 5,
              }
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "color": "#5F49AB",
                  },
                ]
              }
            >
              CANCEL
            </Text>
          </View>
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
                "paddingBottom": 5,
                "paddingLeft": 10,
                "paddingRight": 10,
                "paddingTop": 5,
              }
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "color": "#5F49AB",
                  },
                ]
              }
            >
              OK
            </Text>
          </View>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;
